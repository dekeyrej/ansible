# roles/proxmox-provision/tasks/vm-tasks.yaml
- name: set diskimage based on hostvars[item]['os']
  ansible.builtin.set_fact:
    diskimg: "{{ vmimage_path }}{{ vmimages[hostvars[item]['os']]['target'] }}"

- name: "Assemble 'ip_info' for hostname: {{ item }}"
  ansible.builtin.set_fact:
    ip_info: >-
      {{ (hostvars[item]['ansible_host'] + '/24,gw=' + gateway)
         if 'ansible_host' in hostvars[item]
         else 'dhcp' }}

- name: "Create VM {{ item }}, VMID: {{ hostvars[item]['vmid'] }}"
  community.general.proxmox_kvm:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ node }}"
    name: "{{ item }}"
    node: "{{ node }}"
    vmid: "{{ hostvars[item]['vmid'] }}"
    balloon: "{{ vmballoon }}"
    memory: "{{ vmmemory }}"
    cores: "{{ cores }}"
    cpulimit: "{{ cpulimit }}"
    cpu: "cputype={{ cputype }}"
    ide:
      ide2: "{{ diskpool }}:cloudinit"
    # cicustom: "user=local:snippets/userconfig-{{ hostvars[item]['vmid'] }}.yaml"
    net:
      net0: "{{ netinf }}"
    # ipconfig:
    #   ipconfig0: "ip={{ ip_info }}"
    scsihw: "{{ scsinf }}"
    ostype: "{{ vmostype }}"
    boot: "order={{ bootdiskname }}"
    agent: "{{ agent }}"
    pool: "{{ pool }}"
    protection: "{{ protection }}"
    state: present
  when: hostvars[item]['vmid'] is defined

- name: "Create VM {{ item }}"
  community.general.proxmox_kvm:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ node }}"
    name: "{{ item }}"
    node: "{{ node }}"
    balloon: "{{ vmballoon }}"
    memory: "{{ vmmemory }}"
    cores: "{{ cores }}"
    cpulimit: "{{ cpulimit }}"
    cpu: "cputype={{ cputype }}"
    ide:
      ide2: "{{ diskpool }}:cloudinit"
    # cicustom: "user=local:snippets/userconfig-{{ hostvars[item]['vmid'] }}.yaml"
    net:
      net0: "{{ netinf }}"
    # ipconfig:
    #   ipconfig0: "ip={{ ip_info }}"
    scsihw: "{{ scsinf }}"
    ostype: "{{ vmostype }}"
    boot: "order={{ bootdiskname }}"
    agent: "{{ agent }}"
    pool: "{{ pool }}"
    protection: "{{ protection }}"
    state: present
  when: hostvars[item]['vmid'] is not defined

- name: try to get the vmid for the hostname
  community.general.proxmox_vm_info:
    api_host: "{{ node }}"
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    node: "{{ node }}"
    type: qemu
    name: "{{ item }}"
    config: current
  register: vminfo
  until: vminfo.proxmox_vms[0].vmid is defined
 
- name: Set the resolved vmid
  ansible.builtin.set_fact:
    resolved_vmid: "{{ hostvars[item]['vmid'] | default(vminfo.proxmox_vms[0].vmid | int) }}"

- name: "Create userconfig-vmid for VM {{ resolved_vmid }}"
  ansible.builtin.template:
    src: cloud-init.yaml.j2
    dest: "/var/lib/vz/snippets/userconfig-{{ resolved_vmid }}.yaml"

- name: "Add cicustom for {{ item }}, VMID: {{ resolved_vmid }}"
  community.general.proxmox_kvm:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ node }}"
    node: "{{ node }}"
    name: "{{ item }}"
    vmid: "{{ resolved_vmid }}"
    cicustom: "user=local:snippets/userconfig-{{ resolved_vmid }}.yaml"
    update: true

- name: "Add boot disk from image for VM {{ item }}, VMID: {{ resolved_vmid }}"
  community.general.proxmox_disk:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ node }}"
    vmid: "{{ resolved_vmid }}"
    disk: "{{ bootdiskname }}"
    storage: "{{ diskpool }}"
    import_from: "{{ diskimg }}"
  
- name: "Resize boot disk for VM {{ item }}, VMID: {{ resolved_vmid }}"
  community.general.proxmox_disk:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ node }}"
    vmid: "{{ resolved_vmid }}"
    disk: "{{ bootdiskname }}"
    size: "{{ vmrootdisksize }}"
    state: resized

- name: Start the VM(s)
  community.general.proxmox_kvm:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ node }}"
    node: "{{ node }}"
    vmid: "{{ resolved_vmid }}"
    state: started

# roles/proxmox-provision/tasks/vm-tasks.yaml
# - name: apply overrides from hostvars, if they exist
#   ansible.builtin.set_fact:
#     cores: "{{ hostvars[item]['cores'] | default(cores, true) | int }}"             # common
#     cpulimit: "{{ hostvars[item]['cpulimit'] | default(cpulimit, true)  | int }}"   # common
#     cputype: "{{ hostvars[item]['cputype'] | default(cputype, true)  }}"
#     memory: "{{ hostvars[item]['memory'] | default(memory, true) | int }}"
#     maxmemory: "{{ hostvars[item]['maxmemory'] | default(maxmemory, true)  | int }}"
#     diskpool: "{{ hostvars[item]['diskpool'] | default(diskpool, true) }}"          # common
#     rootsize: "{{ hostvars[item]['rootsize'] | default(rootsize, true) }}"          # common
#     agent: "{{ hostvars[item]['agent'] | default(agent, true) }}"
#     protection: "{{ hostvars[item]['protection'] | default(protection, true) }}"
#     pool: "{{ hostvars[item]['pool'] | default(pool, true) }}"                      # common
- name: set diskimage based on hostvars[item]['os']
  ansible.builtin.set_fact:
    diskimg: "{{ vmimage_path }}{{ vmimages[os]['target'] }}"

- name: "Assemble 'ip_info' for hostname: {{ inventory_hostname }}"
  ansible.builtin.set_fact:
    ip_info: >-
      {{
        (
          static_ip + '/24,gw=' + gateway
          if static_ip is defined
          else 'dhcp'
        ) | trim
      }}


- name: Block delegated to localhost
  delegate_to: localhost
  block:
  - name: "Create VM {{ inventory_hostname }}, VMID: {{ vmid }}"
    community.general.proxmox_kvm:
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      api_host: "{{ node }}"
      name: "{{ inventory_hostname }}"
      node: "{{ node }}"
      vmid: "{{ vmid }}"
      balloon: "{{ memory }}"
      memory: "{{ maxmemory }}"
      cores: "{{ cores }}"
      cpulimit: "{{ cpulimit }}"
      cpu: "cputype={{ cputype }}"
      ide:
        ide2: "{{ diskpool }}:cloudinit"
      # cicustom: "user=local:snippets/userconfig-{{ hostvars[item]['vmid'] }}.yaml"
      net:
        net0: "{{ netinf }}"
      ipconfig:
        ipconfig0: "ip={{ ip_info }}"
      scsihw: "{{ scsinf }}"
      ostype: "{{ vmostype }}"
      boot: "order={{ bootdiskname }}"
      agent: "{{ agent }}"
      pool: "{{ pool }}"
      protection: "{{ protection }}"
      state: present
    when: vmid is defined

  - name: "Create VM {{ inventory_hostname }}"
    community.general.proxmox_kvm:
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      api_host: "{{ node }}"
      name: "{{ inventory_hostname }}"
      node: "{{ node }}"
      balloon: "{{ memory }}"
      memory: "{{ maxmemory }}"
      cores: "{{ cores }}"
      cpulimit: "{{ cpulimit }}"
      cpu: "cputype={{ cputype }}"
      ide:
        ide2: "{{ diskpool }}:cloudinit"
      # cicustom: "user=local:snippets/userconfig-{{ hostvars[item]['vmid'] }}.yaml"
      net:
        net0: "{{ netinf }}"
      ipconfig:
        ipconfig0: "ip={{ ip_info }}"
      scsihw: "{{ scsinf }}"
      ostype: "{{ vmostype }}"
      boot: "order={{ bootdiskname }}"
      agent: "{{ agent }}"
      pool: "{{ pool }}"
      protection: "{{ protection }}"
      state: present
    when: vmid is not defined

  - name: try to get the vmid for the hostname
    community.general.proxmox_vm_info:
      api_host: "{{ node }}"
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      node: "{{ node }}"
      type: qemu
      name: "{{ inventory_hostname }}"
      config: current
    register: vminfo
    until: vminfo.proxmox_vms[0].vmid is defined
  
  - name: Set the resolved vmid
    ansible.builtin.set_fact:
      resolved_vmid: "{{ vmid | default(vminfo.proxmox_vms[0].vmid | int) }}"

- name: block delegated to PVE node
  delegate_to: "{{ node }}"
  block:
  - name: "Create userconfig-vmid for host {{ inventory_hostname }} VM {{ resolved_vmid }}"
    ansible.builtin.template:
      src: cloud-init.yaml.j2
      dest: "/var/lib/vz/snippets/userconfig-{{ resolved_vmid }}.yaml"

  # - name: "Add cicustom for {{ inventory_hostname }}, VMID: {{ resolved_vmid }}"
  #   community.general.proxmox_kvm:
  #     api_user: "{{ api_user }}"
  #     api_password: "{{ api_password }}"
  #     api_host: "{{ node }}"
  #     node: "{{ node }}"
  #     name: "{{ inventory_hostname }}"
  #     vmid: "{{ resolved_vmid }}"
  #     cicustom: "user=local:snippets/userconfig-{{ resolved_vmid }}.yaml"
  #     update: true

  - name: "Add boot disk from image for VM {{ inventory_hostname }}, VMID: {{ resolved_vmid }}"
    community.general.proxmox_disk:
      api_user: "{{ root_api_user }}"            # this one task requires root@pam access
      api_password: "{{ root_api_password }}"    # this one task requires root@pam access
      api_host: "{{ node }}"
      vmid: "{{ resolved_vmid }}"
      disk: "{{ bootdiskname }}"
      storage: "{{ diskpool }}"
      import_from: "{{ diskimg }}"

- name: Block delegated to localhost
  delegate_to: localhost
  block:
  - name: "Add cicustom for {{ inventory_hostname }}, VMID: {{ resolved_vmid }}"
    community.general.proxmox_kvm:
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      api_host: "{{ node }}"
      node: "{{ node }}"
      name: "{{ inventory_hostname }}"
      vmid: "{{ resolved_vmid }}"
      cicustom: "user=local:snippets/userconfig-{{ resolved_vmid }}.yaml"
      update: true

  - name: "Resize boot disk for VM {{ inventory_hostname }}, VMID: {{ resolved_vmid }}"
    community.general.proxmox_disk:
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      api_host: "{{ node }}"
      vmid: "{{ resolved_vmid }}"
      disk: "{{ bootdiskname }}"
      size: "{{ rootsize }}G"
      state: resized

  - name: Start the VM(s)
    community.general.proxmox_kvm:
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      api_host: "{{ node }}"
      node: "{{ node }}"
      vmid: "{{ resolved_vmid }}"
      state: started

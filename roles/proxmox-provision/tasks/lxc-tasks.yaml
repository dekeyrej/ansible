# roles/proxmox-provision/tasks/lxc-tasks.yaml
- name: apply overrides from hostvars, if they exist
  ansible.builtin.set_fact:
    lxcostype: "{{ hostvars[item]['os'] }}"
    cores: "{{ hostvars[item]['cores'] | default(cores, true) | int }}"             # common
    cpulimit: "{{ hostvars[item]['cpulimit'] | default(cpulimit, true)  | int }}"   # common
    lxcmemory: "{{ hostvars[item]['lxcmemory'] | default(lxcmemory, true)  | int }}"
    lxcswap: "{{ hostvars[item]['lxcswap'] | default(lxcswap, true) | int }}"
    diskpool: "{{ hostvars[item]['diskpool'] | default(diskpool, true) }}"          # common
    lxcrootsize: "{{ hostvars[item]['lxcrootsize'] | default(lxcrootsize, true) | int }}"
    unprivileged: "{{ hostvars[item]['unprivileged'] | default(agent, unprivileged) }}"
    onboot: "{{ hostvars[item]['onboot'] | default(onboot, true) }}"
    pool: "{{ hostvars[item]['pool'] | default(pool, true) }}"                      # common
    gpu_access: "{{ hostvars[item]['gpu_access'] | default(gpu_access, true) }}"

- name: "Set base_url and diskimg based for {{ item }}"
  ansible.builtin.set_fact:
    template: "{{ template_base }}{{ lxcimages[hostvars[item]['os']]['target'] }}"

- name: Create Proxmox-VE Container with vmid
  community.general.proxmox:
    api_host: "{{ node }}"
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    node: "{{ node }}"
    vmid: "{{ hostvars[item]['vmid'] }}"
    hostname: "{{ item }}"
    ostemplate: "{{ template }}"
    ostype: "{{ lxcostype }}"
    disk: "{{ diskpool }}:{{ lxcrootsize }}"
    # disk_volume:    # requires community.general 9.2.0 or greater
    #   storage: "{{ diskpool }}"
    #   size: "{{ rootsize }}"
    netif:
      net0: "name=eth0,bridge={{ bridge }},type=veth"
      # net0: "name=eth0,bridge={{ bridge }},ip={{ ip_info }}"
    unprivileged: "{{ unprivileged }}" 
    onboot: "{{ onboot }}"
    pool: "{{ pool }}"
    cores: "{{ cores }}"
    memory: "{{ lxcmemory }}"
    swap: "{{ lxcswap }}"
    # pubkey: "{{ sshkey }}"  this would be sshkeys applied to root
    state: present
  when: hostvars[item]['vmid'] is defined

- name: Create Proxmox-VE Container without vmid
  community.general.proxmox:
    api_host: "{{ node }}"
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    node: "{{ node }}"
    hostname: "{{ item }}"
    ostemplate: "{{ template }}"
    ostype: "{{ lxcostype }}"
    disk: "{{ diskpool }}:{{ lxcrootsize }}"
    # disk_volume:    # requires community.general 9.2.0 or greater
    #   storage: "{{ diskpool }}"
    #   size: "{{ rootsize }}"
    netif:
      net0: "name=eth0,bridge={{ bridge }},type=veth"
      # net0: "name=eth0,bridge={{ bridge }},ip={{ ip_info }}"
    unprivileged: "{{ unprivileged }}" 
    onboot: "{{ onboot }}"
    pool: "{{ pool }}"
    cores: "{{ cores }}"
    memory: "{{ lxcmemory }}"
    swap: "{{ lxcswap }}"
    # pubkey: "{{ sshkey }}"  this would be sshkeys applied to root
    state: present
  when: hostvars[item]['vmid'] is not defined

- name: try to get the vmid for the hostname
  community.general.proxmox_vm_info:
    api_host: "{{ node }}"
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    node: "{{ node }}"
    type: lxc
    name: "{{ item }}"
    config: current
  register: vminfo
  until: vminfo.proxmox_vms[0].vmid is defined
 
- name: Set the resolved vmid
  ansible.builtin.set_fact:
    resolved_vmid: "{{ hostvars[item]['vmid'] | default(vminfo.proxmox_vms[0].vmid | int) }}"

- name: Append GPU config to container config
  blockinfile:
    path: "/etc/pve/lxc/{{ resolved_vmid }}.conf"
    block: "{{ gpu_config_additions }}"
    marker: "# {mark} GPU config additions"
  when: gpu_access

- name: mount the LXC container's rootfs
  ansible.builtin.shell: pct mount {{ resolved_vmid }}

- name: Set owner_value based on 'unprivileged'
  ansible.builtin.set_fact:
    owner_value: >-
      {{ 100000 if unprivileged else 0 }}

- name: Set group_value based on 'unprivileged'
  ansible.builtin.set_fact:
    group_value: >-
      {{ 100000 if unprivileged else 0 }}

- name: create directory for cloud-init seed data
  ansible.builtin.file:
    path: "/var/lib/lxc/{{ resolved_vmid }}/rootfs/var/lib/cloud/seed/nocloud-net"
    state: directory
    owner: "{{ owner_value }}"                         # this chown/chgrp is necessary for unpriviledged containers.
    group: "{{ group_value }}"

- name: copy meta-data to container's mounted rootfs
  ansible.builtin.template:
    src: meta-data.j2
    dest: "/var/lib/lxc/{{ resolved_vmid }}/rootfs/var/lib/cloud/seed/nocloud-net/meta-data"
    owner: "{{ owner_value }}"                         # this chown/chgrp is necessary for unpriviledged containers.
    group: "{{ group_value }}"

- name: copy 00-eth0.network to container's mounted rootfs
  ansible.builtin.template:
    src: 00-eth0.network.j2
    dest: "/var/lib/lxc/{{ resolved_vmid }}/rootfs/etc/systemd/network/00-eth0.network"
    owner: "{{ owner_value }}"                         # this chown/chgrp is necessary for unpriviledged containers.
    group: "{{ group_value }}"
  when:  hostvars[item]['ansible_host'] is defined

- name: copy network-config to container's mounted rootfs
  ansible.builtin.template:
    src: network-config.j2
    dest: "/var/lib/lxc/{{ resolved_vmid }}/rootfs/var/lib/cloud/seed/nocloud-net/network-config"
    owner: "{{ owner_value }}"                         # this chown/chgrp is necessary for unpriviledged containers.
    group: "{{ group_value }}"

- name: copy user-data to container's mounted rootfs
  ansible.builtin.template:
    src: user-data.j2
    dest: "/var/lib/lxc/{{ resolved_vmid }}/rootfs/var/lib/cloud/seed/nocloud-net/user-data"
    owner: "{{ owner_value }}"                         # this chown/chgrp is necessary for unpriviledged containers.
    group: "{{ group_value }}"

- name: copy 90_nocloud.cfg to container's mounted rootfs
  ansible.builtin.copy:
    src: 90_nocloud.cfg
    dest: "/var/lib/lxc/{{ resolved_vmid }}/rootfs/etc/cloud/cloud.cfg.d/90_nocloud.cfg"
    owner: "{{ owner_value }}"                         # this chown/chgrp is necessary for unpriviledged containers.
    group: "{{ group_value }}"

- name: delete cloud-init.disabled
  ansible.builtin.file:
    path: "/var/lib/lxc/{{ resolved_vmid }}/rootfs/etc/cloud/cloud-init.disabled"
    state: absent

- name: unmount the LXC container's rootfs
  ansible.builtin.shell: pct unmount {{ resolved_vmid }}

- name: Start Container
  community.general.proxmox:
    api_host: "{{ node }}"
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    vmid: "{{ resolved_vmid }}"
    state: started
---
- name: Load Kubernetes CA cert from file
  set_fact:
    kube_ca: "{{ lookup('file', '/usr/local/share/ca-certificates/ca.crt') }}"

- name: Check if vault init output file exists
  stat:
    path: /path/to/vault_output_file.txt
  register: vault_file_check

- name: Extract Vault root token if file exists
  when: vault_file_check.stat.exists
  block:
    - name: Load root token from vault output
      set_fact:
        vault_root_token: >-
          {{ lookup('file', '/root/vault_init_output.txt')
             | regex_search('Initial Root Token:\\s*(\\S+)', '\\1') }}

- name: Create Vault service account
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: vault-auth
        namespace: default

- name: Apply default Vault token manifest
  kubernetes.core.k8s:
    state: present
    src: files/default-va-token.yaml

- name: Patch service account using JSON patch
  kubernetes.core.k8s:
    api_version: v1
    kind: ServiceAccount
    name: vault-auth
    namespace: default
    merge_type: json
    definition:
      - op: add
        path: /secrets
        value:
          - name: vault-auth-token

- name: Get vault-auth service account
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ServiceAccount
    name: vault-auth
    namespace: default
  register: sa_info

- name: Get associated secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ sa_info.resources[0].secrets[0].name }}"
    namespace: default
  register: secret_info

- name: Decode JWT token
  set_fact:
    jwt_token: "{{ secret_info.resources[0].data.token | b64decode }}"

- name: Enable Kubernetes auth in Vault
  community.hashi_vault.vault_auth_method:
    name: kubernetes
    state: enabled
    mount_point: kubernetes
    token: "{{ vault_root_token }}"

- name: Configure Kubernetes auth
  community.hashi_vault.vault_write:
    path: auth/kubernetes/config
    token: "{{ vault_root_token }}"
    data:
      kubernetes_host: "{{ kubeapiaddress }}"
      kubernetes_ca_cert: "{{ kube_ca_cert }}"
      token_reviewer_jwt: "{{ jwt_token }}"

- name: Upload policy to Vault
  community.hashi_vault.vault_policy:
    name: my-app-policy
    policy: "{{ lookup('file', role_path ~ '/files/my-app-policy.hcl') }}"
    token: "{{ vault_root_token }}"

- name: Create Vault role
  community.hashi_vault.vault_write:
    path: auth/kubernetes/role/demo
    token: "{{ vault_root_token }}"
    data:
      bound_service_account_namespaces: default
      bound_service_account_names: vault-auth
      policies: my-app-policy
      ttl: 10s

- name: Enable transit engine
  community.hashi_vault.vault_secret_engine:
    name: transit
    state: enabled
    token: "{{ vault_root_token }}"

- name: Create AES key
  community.hashi_vault.vault_write:
    path: transit/keys/aes256-key
    token: "{{ vault_root_token }}"
    method: POST

# - name: delete output file from vault host
#   ansible.builtin.file:
#     path: /root/vault_init_output.txt
#     state: absent
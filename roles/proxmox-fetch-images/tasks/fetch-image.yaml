# roles/proxmox-provision/tasks/fetch-image.yaml
- name: "Set image var for {{ item.type }}:{{ item.os }}:{{ item.release }}"
  ansible.builtin.set_fact:
    image: "{{ images[item.type][item.os][item.release] }}"
    diskimg: "{{ vmimage_path }}{{ images[item.type][item.os][item.release].target }}"
  delegate_to: "{{ node }}"

- name: KVM image tasks
  block:
    - name: Non-amazon images
      block:
        - name: "Download {{ item.os }}-{{ item.release }} image"
          ansible.builtin.shell:
            cmd: |
              wget -nd -N {{ image.baseurl }}
            chdir: /root/vmimages
          register: wget_result

        # - name: debug
        #   ansible.builtin.debug:
        #     var: wget_result

        - name: "Copy image to imports"
          ansible.builtin.shell:
            cmd: |
              cp -p {{ image.basefile }} {{ diskimg }}
            chdir: /root/vmimages
          when:
            - wget_result.rc == 0
            - "'Omitting download' not in wget_result.stderr"

        - name: Record image update event
          ansible.builtin.set_fact:
            image_updates: "{{ image_updates | default([]) + [ {
              'type': item.type,
              'os': item.os,
              'release': item.release,
              'status': 'updated',
              'timestamp': ansible_date_time.iso8601
            } ] }}"
          when: 
            - wget_result.rc == 0
            - "'Omitting download' not in wget_result.stderr"
          delegate_to: localhost

      when: item.os != "amazon"

    - name: Amazon images
      block:
        - name: "Download {{ item.os }}:{{ item.release }} image"
          ansible.builtin.shell:
            cmd: |
              wget -nd -N -r -l1 -A '*.qcow2' {{ image.baseurl }}
            chdir: /root/vmimages
          register: wget_result
        
        - name: Find latest downloaded Amazon image
          ansible.builtin.shell: |
            ls -1t /root/vmimages/{{ 'amzn2-kvm-' if item.release == 2 else 'al2023-kvm-' }}*.qcow2 | head -n 1
          register: amazon_image_file

        - name: "Copy image to imports"
          ansible.builtin.shell: |
            cp -p {{ amazon_image_file.stdout }} {{ diskimg }}
          when:
            - wget_result.rc == 0
            - "'Omitting download' not in wget_result.stderr"
        
        - name: Record image update event
          ansible.builtin.set_fact:
            image_updates: "{{ image_updates | default([]) + [ {
              'type': item.type,
              'os': item.os,
              'release': item.release,
              'status': 'updated',
              'timestamp': ansible_date_time.iso8601
            } ] }}"
          when: 
            - wget_result.rc == 0
            - "'Omitting download' not in wget_result.stderr"
          delegate_to: localhost

      when: item.os == "amazon"
  delegate_to: "{{ node }}"
  when: item.type == 'kvm'

# - name: debug
#   ansible.builtin.debug:
#     var: wget_result

# - name: Record image update event
#   ansible.builtin.set_fact:
#     image_updates: "{{ image_updates | default([]) + [ {
#       'type': item.type,
#       'os': item.os,
#       'release': item.release,
#       'status': 'updated',
#       'timestamp': ansible_date_time.iso8601
#     } ] }}"
#   when: 
#     - wget_result.rc == 0
#     - "'Omitting download' not in wget_result.stderr"
#   delegate_to: localhost


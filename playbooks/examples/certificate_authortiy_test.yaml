#=== ansible 'native' Certificate Authority/Generate Host Certificates ===# 
- name: create self-hosted certificate authority
  hosts: localhost
  vars_files:
    - ca-defaults.yaml
  vars:
    server_name: test123
    server_ip: 192.168.123.123
  tasks:
  #=== Create Certificate Authority ===#
  - name: Create certificate_authority directory, if it doesn't exist
    ansible.builtin.file:
      path: "{{ ca_base_path }}"
      state: directory

  # community.crypto.openssl_privatekey defaults to 4096 bits and RSA
  - name: Create private key with password protection
    community.crypto.openssl_privatekey:
      path: "{{ ca_key_path }}"
      # passphrase: "{{ secret_ca_passphrase }}"

  - name: Create certificate signing request (CSR) for CA certificate
    community.crypto.openssl_csr_pipe:
      privatekey_path: "{{ ca_key_path }}"
      # privatekey_passphrase: "{{ secret_ca_passphrase }}"
      ### Optional keys
      country_name: "{{ country }}"
      state_or_province_name: "{{ state }}"
      locality_name: "{{ locality }}"
      organization_name: "{{ organization }}"
      organizational_unit_name: "{{ organizational_unit }}"
      ### End Optional keys
      common_name: "{{ common_name }}"
      use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
      basic_constraints:
        - 'CA:TRUE'
      basic_constraints_critical: true
      ### Python 3.13 specific keyUsage keys
      key_usage:
        - keyCertSign
        - digitalSignature
      key_usage_critical: true
      ### End Python 3.13 specific keys
    register: ca_csr

  - name: Create self-signed CA certificate from CSR
    community.crypto.x509_certificate:
      path: "{{ ca_cert_path }}"
      csr_content: "{{ ca_csr.csr }}"
      privatekey_path: "{{ ca_key_path }}"
      # privatekey_passphrase: "{{ secret_ca_passphrase }}"
      provider: selfsigned

  
  #=== Generate Host Key/Certificate ===#
  - name:  Get info for CA Certificate
    community.crypto.x509_certificate_info:
      path: "{{ ca_cert_path }}"
    register: result

  - name: set authority_key_identifier
    ansible.builtin.set_fact:
      aki: "{{ result.subject_key_identifier }}"

  - name: Create private key for new certificate on server_1
    community.crypto.openssl_privatekey:
      path: "{{ ca_base_path }}/{{ server_name }}-certificate.key"
    # delegate_to: server_1
    run_once: true

  - name: Create certificate signing request (CSR) for new certificate
    community.crypto.openssl_csr_pipe:
      privatekey_path: "{{ ca_base_path }}/{{ server_name }}-certificate.key"
      key_usage:
        - keyEncipherment
        - digitalSignature
      key_usage_critical: true
      extended_key_usage:
        - serverAuth
      subject_alt_name:
        - "DNS:{{ server_name }}"
        - "DNS:{{ server_name }}.local"
        - "IP:{{ server_ip }}"
        - "IP:127.0.0.1"
      authority_key_identifier: "{{ aki }}"
    # delegate_to: server_1
    run_once: true
    register: csr

  - name: Check whether certificate exists
    ansible.builtin.stat:
      path: "{{ ca_base_path }}/{{ server_name }}-certificate.pem"
    # delegate_to: server_1
    run_once: true
    register: certificate_exists

  - name: Read existing certificate if exists
    ansible.builtin.slurp:
      src: "{{ ca_base_path }}/{{ server_name }}-certificate.pem"
    when: certificate_exists.stat.exists
    # delegate_to: server_1
    run_once: true
    register: certificate

  - name: Sign certificate with our CA
    community.crypto.x509_certificate_pipe:
      content: "{{ (certificate.content | b64decode) if certificate_exists.stat.exists else omit }}"
      csr_content: "{{ csr.csr }}"
      provider: ownca
      ownca_path: "{{ ca_cert_path }}"
      ownca_privatekey_path: "{{ ca_key_path }}"
      # ownca_privatekey_passphrase: "{{ secret_ca_passphrase }}"
      ownca_not_after: +365d  # valid for one year
      ownca_not_before: "-1d"  # valid since yesterday
    # delegate_to: server_2
    run_once: true
    register: certificate

  - name: Write certificate file on server_1
    ansible.builtin.copy:
      content: "{{ certificate.certificate }}"
      dest: "{{ ca_base_path }}/{{ server_name }}-certificate.pem"
    # delegate_to: server_1
    run_once: true
    when: certificate is changed
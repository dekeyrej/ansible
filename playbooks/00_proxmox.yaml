---
# Creates an RFC 5280 compliant Certificate Authority (which makes Python 3.13 happy)
- name: Establish Certificate Authority
  hosts: localhost
  connection: local
  roles:
    - role: certificate-authority
      vars_files:
        - ca_vars.yaml

# handy routine to clean up the known_hosts file to avoid nasty warnings
- name: Clear known_hosts
  hosts: localhost
  connection: local
  tasks:
    - name: Loop through hosts removing previous entries from /home/ubuntu/.ssh/known_hosts
      ansible.builtin.shell:
        cmd: "ssh-keygen -f '/home/ubuntu/.ssh/known_hosts' -R {{ item }}"
      loop: "{{ groups['allnodes'] }}"

# Sample ansible playbook demonstrating some functionality in Proxmox-VE
# using the community.general.proxmox_kvm and proxmox_disk modules as
# encpsulated in the two roles included below.

# the first role creates a VM to be the template for the actual hosts to be provisioned
# -- note -- "import image to disk" requires root@pam credentials to import from an absolute path
# the second role makes a series of clones based on the info in 03_host_list.yaml
# -- note -- user@pve PVEAdmin level credentials are sufficient for this role

- name: Create VM Template and Provision Proxmox VM hosts for Kubernetes cluster
  hosts: pvenode
  become: no  # root user only on PVE Node
  vars_files:
    - 01_template_overrides.yaml
    - 03_sha_keys.yaml
  roles:
    - role: proxmox-node-setup
    - role: proxmox-template
    - role: proxmox-clone
      vars:
        host_group: allnodes

- name: Create VM Template and Provision Proxmox VM hosts for Kubernetes cluster
  hosts: pvenode
  become: no  # root user only on PVE Node
  roles:
    - role: proxmox-node-setup
    - role: proxmox-vm
      vars:
        host_group: allnodes

# Additional role to create an LXC Container on proxmox using the community.general.proxmox module
- name: create Proxmox Container for Vault
  hosts: pvenode
  vars:
    host_group: vault
  roles:
    - role: proxmox-node-setup
    - role: proxmox-container

# Creates RFC 2818 compliant TLS certificates with IP SANs (which makes Vault happy)
#   works with Certificate Authority above
- name: TLS keys for server
  hosts: localhost
  connection: local
  vars:
    host_group: vault
  roles:
    - role: generate-keys

# need a pause here to  let the container settle...
- name: wait a bit
  localhost:
  connection: local
  tasks:
    - name: wait a bit
      ansible.builtin.pause:
        seconds: 10
      
# # Adds CA to cert store, installs vault package, 
# #   configures vault (TLS Keys and configuration including gcpckms auto-unseal),
# #   enables/starts the vault service, and initializes the vault - writing the root token and 
# #   unseal keys back to the ansible host
- name: Setup Vault
  hosts: vault
  roles:
    - role: copy-ca-to-host
    - role: update-all
    - role: vault-install
    - role: vault-configure
    - role: vault-initialize
        